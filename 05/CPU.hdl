// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode C-instruction = op 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 writeM j1 j2 j3
    And(a=instruction[15], b=instruction[15], out=op);

        // Only load to A register if its an address or if C-instruction specifies it
    Not(in=op, out=notOp);
    Xor(a=notOp, b=d1, out=notOporD1);

    And(a=instruction[15], b=instruction[12], out=a);
    And(a=instruction[15], b=instruction[11], out=c1);
    And(a=instruction[15], b=instruction[10], out=c2);
    And(a=instruction[15], b=instruction[9], out=c3);
    And(a=instruction[15], b=instruction[8], out=c4);
    And(a=instruction[15], b=instruction[7], out=c5);
    And(a=instruction[15], b=instruction[6], out=c6);
    And(a=instruction[15], b=instruction[5], out=d1);
    And(a=instruction[15], b=instruction[4], out=d2);
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);

    // A register logic
    Mux16(a=instruction, b=outALU, sel=d1, out=inA);
    ARegister(in=inA, load=notOporD1, out=outA, out[0..14]=addressM);        

    // D register logic
    DRegister(in=outALU, load=d2, out=inALUx);

    // ALU logic  
    Mux16(a=outA, b=inM, sel=a, out=inALUy);
    ALU(x=inALUx, y=inALUy, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outALU, zr=zr, ng=ng);
    
    // PC logic
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    
        // JGT: ALU output > 0 
    And(a=notZr, b=notNg, out=positiveOut);
    And(a=j3, b=positiveOut, out=jump3);  

        // JEQ: ALU output == 0
    And(a=zr, b=notNg, out=zeroOut); 
    And(a=j2, b=zeroOut, out=jump2);

        // JLT: ALU output < 0
    And(a=notZr, b=ng, out=negativeOut); 
    And(a=j1, b=negativeOut, out=jump1);       


    Or(a=jump1, b=jump2, out=jump1or2);
    Or(a=jump1or2, b=jump3, out=jump);

    Not(in=jump, out=noJump);
    PC(in=outA, load=jump, inc=noJump, reset=reset, out[0..14]=pc);
}